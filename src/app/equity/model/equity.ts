import { GeographyExposition } from "../../geography/model/geography";
import { SectorExposition } from "../../sector/model/sector";

/**
 * Equity entity and DTO. Reflects the MongoDB document
 *
 * Maps from the object received from the broker (may change in the future).
 *
 * The id is generated by concatenating the broker name and broker own id.
 * Other useful values are mapped, such as the ticker symbol, amount, value, etc.
 *
 * Exposure can also be mapped separately.
 */
export class Equity {
  _id: string;
  name: string;
  ticker: string;
  type: string; // Share, ETF...
  active: boolean; // Active or closed position (number of shares > 0).
  currency: string;
  quantity: number;
  amount: number;

  geography: GeographyExposition[];
  sectors: SectorExposition[];

  //TODO handle change in raw material
  //TODO factory for different raw equities
  constructor(equityRaw: any) {
    try {
      this._id = this.createId('DeGiro', equityRaw.id);
      this.name = equityRaw.productData.name;
      this.ticker = equityRaw.productData.symbol;
      this.type = equityRaw.productData.productType;
      this.active = equityRaw.size > 0;
      this.currency = equityRaw.productData.currency;
      this.quantity = equityRaw.size;
      this.amount =  equityRaw.value;

      this.geography = [];
      this.sectors = [];

    } catch(e) {
      console.debug(e);
      throw new Error('Error parsing raw Equity.');
    }
  }

  public equals(other: Equity): boolean {
    return this._id === other._id
      && this.name === other.name
      && this.ticker === other.ticker
      && this.type === other.type;
  }

  public simpleEquals(other: Equity): boolean {
    return this.name === other.name
      && this.ticker === other.ticker
      && this.type === other.type;
  }

  private createId(source: string, localId: string): string {
    return source + '-' + localId;
  }
}
